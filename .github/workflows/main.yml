name: Flutter Build and Release

on:
  push:
    branches:
      - 'release/0.0.1'
      - /^release\/.*$/

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get app version and name
        run: |
          APP_VERSION=$(grep -E '^version:' pubspec.yaml | awk '{print $2}' | tr -d "'")
          APP_NAME=$(grep -E '^name:' pubspec.yaml | awk '{print $2}')
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Print APP_NAME and APP_VERSION
        run: |
          echo "The app name is ${{ env.APP_NAME }}"
          echo "The app version is ${{ env.APP_VERSION }}"
        shell: bash

      - name: Setup Flutter environment
        run: flutter pub get

      - name: Determine branch type
        id: determine-branch
        run: echo "::set-output name=branch_type::$(if [[ $GITHUB_REF =~ ^refs/heads/release/.*$ ]]; then echo 'release'; else echo 'other'; fi)"
        shell: bash

      - name: Build and package app for macOS
        if: matrix.os == 'macos-latest' && steps.determine-branch.outputs.branch_type == 'release'
        run: |
          flutter build macos --release
          mkdir -p release
          hdiutil create -volname "${{ env.APP_NAME }}" \
                         -srcfolder "build/macos/Build/Products/Release/${{ env.APP_NAME }}.app" \
                         -ov -format UDZO "release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg"
        shell: bash

      - name: Build and package app for Windows
        if: matrix.os == 'windows-latest' && steps.determine-branch.outputs.branch_type == 'release'
        run: |
          flutter build windows --release
          mkdir -p release
          cp "build/windows/x64/runner/Release/${{ env.APP_NAME }}.exe" "release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.exe"
        shell: pwsh

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'v${{ env.APP_VERSION }}'
          release_name: 'Flutter PC Release'
          body: 'Automated release of Flutter PC build'

      - name: Upload Windows build to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          asset_name: release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.exe
          asset_path: release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.exe
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_content_type: application/octet-stream

      - name: Upload macOS build to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          asset_name: release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg
          asset_path: release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_content_type: application/x-apple-diskimage
