name: Flutter PC Build and Release

on:
  push:
    branches:
      - 'release/0.0.1'
      - /^release\/.*$/

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    outputs:
      app_name: ${{ steps.get_app_info.outputs.app_name || steps.get_app_info_win.outputs.app_name }}
      app_version: ${{ steps.get_app_info.outputs.app_version || steps.get_app_info_win.outputs.app_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 获取应用信息
      - name: Get app version and name
        id: get_app_info
        if: matrix.os != 'windows-latest'
        run: |
          APP_VERSION=$(grep -E '^version:' pubspec.yaml | awk '{print $2}' | tr -d "'")
          APP_NAME=$(grep -E '^name:' pubspec.yaml | awk '{print $2}')
          echo "::set-output name=app_version::$APP_VERSION"
          echo "::set-output name=app_name::$APP_NAME"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Get app version and name (Windows)
        if: matrix.os == 'windows-latest'
        id: get_app_info_win
        run: |
          $APP_VERSION = (Get-Content -Path pubspec.yaml | Select-String -Pattern 'version:' | ForEach-Object { $_.Line.Split(':')[1].Trim() })
          $APP_NAME = (Get-Content -Path pubspec.yaml | Select-String -Pattern 'name:' | ForEach-Object { $_.Line.Split(':')[1].Trim() })
          echo "::set-output name=app_version::$APP_VERSION"
          echo "::set-output name=app_name::$APP_NAME"
          echo "APP_VERSION=$APP_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "APP_NAME=$APP_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Print APP_NAME and APP_VERSION
        run: |
          echo "The app name is ${{ env.APP_NAME }}"
          echo "The app version is ${{ env.APP_VERSION }}"

      - name: Set up Flutter
        id: flutter-env
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'

      - name: Setup Flutter environment
        run: flutter pub get

      # macOS 构建
      # - name: Generate self-signed certificate for macOS
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     echo "Generating self-signed certificate..."
      #     security create-keychain -p "" build.keychain
      #     security default-keychain -s build.keychain
      #     security unlock-keychain -p "" build.keychain

      #     # 生成自签名证书
      #     CERT_NAME="SelfSignedCert"
      #     echo "Generating certificate with CN=$CERT_NAME"
      #     echo "Step 1/7: Creating key and certificate..."
      #     openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=$CERT_NAME"
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to generate certificate"
      #         exit 1
      #     fi

      #     echo "Step 2/7: Creating PKCS12 file..."
      #     openssl pkcs12 -export -out certificate.p12 -inkey key.pem -in cert.pem -passout pass:password -name "$CERT_NAME"
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to create PKCS12 file"
      #         exit 1
      #     fi

      #     # 导入证书并设置信任设置
      #     echo "Step 3/7: Importing certificate into build.keychain..."
      #     security import certificate.p12 -k build.keychain -P "password" -T /usr/bin/codesign -T /usr/bin/productsign
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to import certificate"
      #         exit 1
      #     fi
          
      #     # 设置证书扩展密钥用法
      #     echo "Step 4/7: Setting certificate extensions..."
      #     echo "Setting key partition list..."
      #     for i in {1..3}; do
      #         security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
      #         if [ $? -eq 0 ]; then
      #             break
      #         fi
      #         echo "Attempt $i failed, retrying..."
      #         sleep 2
      #     done
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to set key partition list after 3 attempts"
      #         exit 1
      #     fi

      #     echo "Adding trusted certificate..."
      #     for i in {1..3}; do
      #         security add-trusted-cert -d -r trustRoot -k build.keychain cert.pem
      #         if [ $? -eq 0 ]; then
      #             break
      #         fi
      #         echo "Attempt $i failed, retrying..."
      #         sleep 2
      #     done
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to add trusted certificate after 3 attempts"
      #         exit 1
      #     fi

      #     echo "Verifying certificate trust settings..."
      #     security dump-trust-settings -d
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to verify trust settings"
      #         exit 1
      #     fi

      #     # 验证证书是否导入成功
      #     echo "Step 5/7: Verifying certificate import..."
      #     echo "Available identities:"
      #     security find-identity -v -p codesigning build.keychain
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to list identities"
      #         exit 1
      #     fi
          
      #     echo "Certificate details:"
      #     security find-certificate -c "$CERT_NAME" -p build.keychain | openssl x509 -text -noout
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to get certificate details"
      #         exit 1
      #     fi
          
      #     echo "Keychain list:"
      #     security list-keychains
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to list keychains"
      #         exit 1
      #     fi
          
      #     echo "Keychain contents:"
      #     security dump-keychain build.keychain
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to dump keychain contents"
      #         exit 1
      #     fi
          
      #     echo "Step 6/7: Verifying certificate capabilities..."
      #     certtool d cert.pem | grep -i "extended key usage"
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to verify certificate capabilities"
      #         exit 1
      #     fi
          
      #     # 清理临时文件
      #     echo "Step 7/7: Cleaning up temporary files..."
      #     rm -f key.pem cert.pem certificate.p12
      #     if [ $? -ne 0 ]; then
      #         echo "Failed to clean up temporary files"
      #         exit 1
      #     fi
          
      #     echo "Certificate generation process completed successfully."
      #     echo "Certificate name for signing: $CERT_NAME"

      - name: Build macOS app
        if: matrix.os == 'macos-latest'
        run: |
          flutter build macos --release
          mkdir -p release

      - name: Install create-dmg
        if: matrix.os == 'macos-latest'
        run: brew install create-dmg

      - name: Create DMG for macOS
        if: matrix.os == 'macos-latest'
        run: |
          create-dmg \
            --volname "${{ env.APP_NAME }} ${{ env.APP_VERSION }} Installer" \
            --background "assets/images/install_background.png" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon "${{ env.APP_NAME }}.app" 200 190 \
            --app-drop-link 400 185 \
            "release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg" \
            "build/macos/Build/Products/Release/${{ env.APP_NAME }}.app"

      # - name: Codesign macOS dmg with self-signed certificate
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     echo "Unlocking keychain..."
      #     security unlock-keychain -p "" build.keychain

      #     echo "Listing available identities..."
      #     security find-identity -v -p codesigning build.keychain

      #     echo "Signing DMG file with self-signed certificate..."
      #     CERT_NAME="SelfSignedCert"
      #     codesign --deep --force --verify --verbose --sign "$CERT_NAME" --keychain build.keychain --options runtime --entitlements "$PSScriptRoot/entitlements.plist" "release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg"
      #     echo "Signing completed."

      # Windows 构建
      - name: Download Inno Setup
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/ispack.exe" -OutFile "ispack.exe"
          Start-Process -FilePath ".\ispack.exe" -ArgumentList "/SP-", "/VERYSILENT", "/NORESTART", "/DIR=C:\Program Files (x86)\Inno Setup 6" -Wait
          Remove-Item .\ispack.exe

      - name: Build Windows app
        if: matrix.os == 'windows-latest'
        run: |
          flutter build windows --release

      - name: Compile Inno Setup script
        if: matrix.os == 'windows-latest'
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /Q "/DMyAppVersion=${{ env.APP_VERSION }}" "/DMyAppName=${{ env.APP_NAME }}" .\setup.iss

      - name: Generate self-signed certificate for Windows
        if: matrix.os == 'windows-latest'
        run: |
          $certificatePath = "$env:RUNNER_TEMP\certificate.pfx"
          $certificateName = "SelfSignedCert"
          $password = "Password123!"

          # 生成自签名证书
          echo "Step 1/5: Generating self-signed certificate..."
          echo "Collecting system information..."
          $systemInfo = @{
              OSVersion = [System.Environment]::OSVersion.VersionString
              PowerShellVersion = $PSVersionTable.PSVersion
              ExecutionPolicy = Get-ExecutionPolicy
              CertStoreLocation = Test-Path Cert:\LocalMachine\My
              AdminCheck = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
          }
          echo "System Info:"
          $systemInfo.GetEnumerator() | ForEach-Object { "$($_.Key): $($_.Value)" }

          # 尝试生成证书，最多重试3次
          $maxRetries = 3
          $retryCount = 0
          $cert = $null

          while ($retryCount -lt $maxRetries) {
              try {
                  echo "Attempt $($retryCount + 1) of $maxRetries"
                  # 根据 PowerShell 版本使用不同的参数
                  if ($PSVersionTable.PSVersion.Major -ge 7) {
                      # PowerShell 7+ 使用兼容语法
                      $cert = New-SelfSignedCertificate -DnsName $certificateName `
                        -CertStoreLocation Cert:\LocalMachine\My `
                        -Type CodeSigning `
                        -KeyUsage DigitalSignature `
                        -KeySpec Signature `
                        -KeyLength 2048 `
                        -NotAfter (Get-Date).AddYears(5) `
                        -ErrorAction Stop
                  } else {
                      # PowerShell 5.1 使用完整语法
                      $cert = New-SelfSignedCertificate -DnsName $certificateName `
                        -CertStoreLocation Cert:\LocalMachine\My `
                        -Type CodeSigningCert `
                        -KeyUsage DigitalSignature `
                        -KeySpec Signature `
                        -KeyLength 2048 `
                        -HashAlgorithm SHA256 `
                        -NotAfter (Get-Date).AddYears(5) `
                        -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3") `
                        -ErrorAction Stop
                  }
                  break
              }
              catch {
                  $retryCount++
                  echo "Certificate generation failed: $_"
                  if ($retryCount -lt $maxRetries) {
                      echo "Retrying in 5 seconds..."
                      Start-Sleep -Seconds 5
                  }
              }
          }

          if (-not $cert) {
              echo "Failed to generate certificate after $maxRetries attempts"
              echo "Trying alternative method using OpenSSL..."
              try {
                  # 使用 OpenSSL 作为备选方案
                  if (-not (Get-Command openssl -ErrorAction SilentlyContinue)) {
                      echo "Installing OpenSSL..."
                      choco install openssl -y
                  }
                  
                  echo "Generating private key..."
                  openssl genrsa -out private.key 2048
                  
                  echo "Generating certificate signing request..."
                  openssl req -new -key private.key -out cert.csr -subj "/CN=$certificateName"
                  
                  echo "Generating self-signed certificate..."
                  openssl x509 -req -days 365 -in cert.csr -signkey private.key -out cert.crt
                  
                  echo "Converting to PFX..."
                  openssl pkcs12 -export -out $certificatePath -inkey private.key -in cert.crt -password pass:$password
                  
                  echo "Importing certificate..."
                  Import-PfxCertificate -FilePath $certificatePath -CertStoreLocation Cert:\LocalMachine\My -Password (ConvertTo-SecureString -String $password -Force -AsPlainText)
                  
                  $cert = Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object { $_.Subject -eq "CN=$certificateName" }
              }
              catch {
                  echo "OpenSSL method also failed: $_"
                  exit 1
              }
          }

          # 将证书安装到受信任的根证书存储
          echo "Step 2/5: Installing certificate to trusted root store..."
          $cert | Export-Certificate -FilePath "$env:RUNNER_TEMP\certificate.cer" -Type CERT
          Import-Certificate -FilePath "$env:RUNNER_TEMP\certificate.cer" -CertStoreLocation Cert:\LocalMachine\Root

          # 验证证书安装
          echo "Verifying certificate installation..."
          $installedCert = Get-ChildItem -Path Cert:\LocalMachine\Root | Where-Object { $_.Subject -eq "CN=$certificateName" }
          if (-not $installedCert) {
              Write-Error "Certificate not found in trusted root store"
              exit 1
          }

          # 导出证书为 pfx 文件
          echo "Step 3/5: Exporting certificate as PFX..."
          Export-PfxCertificate -Cert $cert -FilePath $certificatePath -Password (ConvertTo-SecureString -String $password -Force -AsPlainText)

          # 签名 exe 文件
          echo "Step 4/5: Signing executable..."
          $exePath = "release\release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.exe"
          $signtoolPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe"

          # 检查文件是否存在
          if (-Not (Test-Path $exePath)) {
              Write-Error "File not found: $exePath"
              exit 1
          }

          # 签名文件
          echo "Signing file: $exePath"
          & $signtoolPath sign /fd SHA256 /a /tr http://timestamp.digicert.com /td SHA256 /v /sm /s My /n "$certificateName" "$exePath"
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Signing failed with exit code $LASTEXITCODE"
              exit $LASTEXITCODE
          }

          # 验证签名
          echo "Step 5/5: Verifying signature..."
          $fullExePath = Resolve-Path $exePath
          & $signtoolPath verify /pa /v "$fullExePath"
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Signature verification failed with exit code $LASTEXITCODE"
              echo "Running additional verification with debug output:"
              & $signtoolPath verify /pa /v "$fullExePath"
              exit $LASTEXITCODE
          }

          # 验证证书链
          echo "Verifying certificate chain..."
          $certChainResult = & $signtoolPath verify /pa /v /c "$fullExePath" 2>&1
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Certificate chain verification failed with exit code $LASTEXITCODE"
              Write-Output "Certificate chain verification output:"
              Write-Output $certChainResult
              
              # 尝试手动验证证书链
              echo "Attempting manual certificate chain verification..."
              $certChain = Get-ChildItem -Path Cert:\LocalMachine\Root | Where-Object { $_.Subject -eq "CN=$certificateName" }
              if (-not $certChain) {
                  Write-Error "Certificate not found in trusted root store"
                  exit 1
              }
              
              # 输出证书链详细信息
              echo "Certificate chain details:"
              $certChain | Format-List *
              
              # 检查证书是否有效
              if ($certChain.NotAfter -lt (Get-Date)) {
                  Write-Error "Certificate has expired"
                  exit 1
              }
              
              # 检查证书用途
              if (-not $certChain.EnhancedKeyUsageList | Where-Object { $_.FriendlyName -eq "Code Signing" }) {
                  Write-Error "Certificate is not valid for code signing"
                  exit 1
              }
              
              Write-Output "Manual certificate chain verification completed"
              Write-Output "Certificate appears valid but system verification failed"
              Write-Output "This is expected behavior for self-signed certificates"
          }

          # 清理临时证书文件
          Remove-Item "$env:RUNNER_TEMP\certificate.cer"
          Write-Output "Signing and verification process completed successfully"
          Write-Output "Certificate thumbprint: $($cert.Thumbprint)"
          Write-Output "Certificate subject: $($cert.Subject)"
          Write-Output "Certificate issuer: $($cert.Issuer)"
          Write-Output "Certificate expiration: $($cert.NotAfter)"

      # 上传构建产物
      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifact
          path: ./release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifact
          path: ./release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 下载构建产物
      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-artifact
          path: ./release

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-artifact
          path: ./release

      # 上传 release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.build.outputs.app_version }}
        with:
          tag_name: "v${{ steps.get_version_name.outputs.app_version }}"
          name: Release ${{ needs.build.outputs.app_name }} ${{ needs.build.outputs.app_version }}
          body: 'Flutter PC Build and Release'
          draft: false
          prerelease: false
          files: |
            release/release-${{ needs.build.outputs.app_name }}-${{ needs.build.outputs.app_version }}.dmg
            release/release-${{ needs.build.outputs.app_name }}-${{ needs.build.outputs.app_version }}.exe

  merge:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/*')

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # 确保所有历史记录都被获取，以便能够正确合并

      - name: Merge to Main/Master
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          MAIN_BRANCH="main"  # 或者 "master" 根据你的默认分支名称
          CURRENT_BRANCH=$(echo $GITHUB_REF | cut -d'/' -f3)

          # 检查是否已经有最新的主分支
          git fetch origin $MAIN_BRANCH
          git checkout $MAIN_BRANCH
          git pull origin $MAIN_BRANCH

          # 合并当前分支到主分支
          git merge --no-ff $CURRENT_BRANCH -m "Merge branch '$CURRENT_BRANCH' into $MAIN_BRANCH"

          # 推送更新到远程仓库
          git push origin $MAIN_BRANCH
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
