name: Flutter PC Build and Release

on:
  push:
    branches:
      - 'release/0.0.1'
      - /^release\/.*$/

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    outputs:
      app_name: ${{ steps.get_app_info.outputs.app_name || steps.get_app_info_win.outputs.app_name }}
      app_version: ${{ steps.get_app_info.outputs.app_version || steps.get_app_info_win.outputs.app_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 获取应用信息
      - name: Get app version and name
        id: get_app_info
        if: matrix.os != 'windows-latest'
        run: |
          APP_VERSION=$(grep -E '^version:' pubspec.yaml | awk '{print $2}' | tr -d "'")
          APP_NAME=$(grep -E '^name:' pubspec.yaml | awk '{print $2}')
          echo "::set-output name=app_version::$APP_VERSION"
          echo "::set-output name=app_name::$APP_NAME"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Get app version and name (Windows)
        if: matrix.os == 'windows-latest'
        id: get_app_info_win
        run: |
          $APP_VERSION = (Get-Content -Path pubspec.yaml | Select-String -Pattern 'version:' | ForEach-Object { $_.Line.Split(':')[1].Trim() })
          $APP_NAME = (Get-Content -Path pubspec.yaml | Select-String -Pattern 'name:' | ForEach-Object { $_.Line.Split(':')[1].Trim() })
          echo "::set-output name=app_version::$APP_VERSION"
          echo "::set-output name=app_name::$APP_NAME"
          echo "APP_VERSION=$APP_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "APP_NAME=$APP_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Print APP_NAME and APP_VERSION
        run: |
          echo "The app name is ${{ env.APP_NAME }}"
          echo "The app version is ${{ env.APP_VERSION }}"

      - name: Set up Flutter
        id: flutter-env
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'

      - name: Setup Flutter environment
        run: flutter pub get

      # macOS 构建
      - name: Cache Homebrew dependencies
        if: matrix.os == 'macos-latest'
        id: cache-homebrew
        uses: actions/cache@v2
        with:
          path: /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core
          key: homebrew-dependencies-${{ runner.os }}-v1
          restore-keys: |
            homebrew-dependencies-${{ runner.os }}-

      - name: Install create-dmg via Homebrew
        if: matrix.os == 'macos-latest' && steps.cache-homebrew.outputs.cache-hit != 'true'
        run: brew install create-dmg

      - name: Cache create-dmg
        if: matrix.os == 'macos-latest'
        id: cache-create-dmg
        uses: actions/cache@v2
        with:
          path: /usr/local/Caskroom/create-dmg
          key: create-dmg-${{ runner.os }}-v1
          restore-keys: |
            create-dmg-${{ runner.os }}-

      - name: Build macOS app
        if: matrix.os == 'macos-latest'
        run: |
          flutter build macos --release
          mkdir -p release

      - name: Create DMG for macOS
        if: matrix.os == 'macos-latest'
        run: |
          create-dmg \
            --volname "${{ env.APP_NAME }} ${{ env.APP_VERSION }} Installer" \
            --background "assets/images/install_background.png" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon "${{ env.APP_NAME }}.app" 200 190 \
            --app-drop-link 400 185 \
            "release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg" \
            "build/macos/Build/Products/Release/${{ env.APP_NAME }}.app"

      - name: Codesign macOS dmg
        if: matrix.os == 'macos-latest'
        run: |
          codesign --sign  ${{ secrets.MACOS_DEVELOPER_ID }} --verbose --timestamp --options runtime --entitlements "$PSScriptRoot/entitlements.plist" "release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg"

      # Windows 构建
      - name: Download Inno Setup
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/ispack.exe" -OutFile "ispack.exe"
          Start-Process -FilePath ".\ispack.exe" -ArgumentList "/SP-", "/VERYSILENT", "/NORESTART", "/DIR=C:\Program Files (x86)\Inno Setup 6" -Wait
          Remove-Item .\ispack.exe

      # - name: Install Chocolatey
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     Write-Host "Installing Chocolatey..."
      #     Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      #     choco feature enable -n allowGlobalConfirmation

      # - name: Install Windows SDK
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     choco install windows-sdk

      - name: Build Windows app
        if: matrix.os == 'windows-latest'
        run: |
          flutter build windows --release

      # - name: Sign application
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     signtool sign /f "flutter_build_test.p12" /p "flutter_build_test" /d "描述123" /t http://timestamp.digicert.com "build\windows\x64\runner\Release\${{ env.APP_NAME }}.exe"

      - name: Compile Inno Setup script
        if: matrix.os == 'windows-latest'
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /Q "/DMyAppVersion=${{ env.APP_VERSION }}" "/DMyAppName=${{ env.APP_NAME }}" .\setup.iss

      - name: print ls
        run: ls

      - name: print ls for release
        run: ls release

      # 上传构建产物
      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifact
          path: ./release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifact
          path: ./release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 下载构建产物
      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-artifact
          path: ./release

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-artifact
          path: ./release

      # 上传 release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.build.outputs.app_version }}
        with:
          tag_name: "v${{ steps.get_version_name.outputs.app_version }}"
          name: Release ${{ needs.build.outputs.app_name }} ${{ needs.build.outputs.app_version }}
          body: 'Flutter PC Build and Release'
          draft: false
          prerelease: false
          files: |
            release/release-${{ needs.build.outputs.app_name }}-${{ needs.build.outputs.app_version }}.dmg
            release/release-${{ needs.build.outputs.app_name }}-${{ needs.build.outputs.app_version }}.exe

  merge:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/*')

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # 确保所有历史记录都被获取，以便能够正确合并

      - name: Merge to Main/Master
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          MAIN_BRANCH="main"  # 或者 "master" 根据你的默认分支名称
          CURRENT_BRANCH=$(echo $GITHUB_REF | cut -d'/' -f3)

          # 检查是否已经有最新的主分支
          git fetch origin $MAIN_BRANCH
          git checkout $MAIN_BRANCH
          git pull origin $MAIN_BRANCH

          # 合并当前分支到主分支
          git merge --no-ff $CURRENT_BRANCH -m "Merge branch '$CURRENT_BRANCH' into $MAIN_BRANCH"

          # 推送更新到远程仓库
          git push origin $MAIN_BRANCH
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
