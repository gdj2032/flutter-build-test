name: Flutter Build and Release

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get app version and name
        run: |
          APP_VERSION=$(grep -E '^version:' pubspec.yaml | awk '{print $2}' | tr -d "'")
          APP_NAME=$(grep -E '^name:' pubspec.yaml | awk '{print $2}')
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Print APP_NAME and APP_VERSION
        run: |
          echo "The app name is ${{ env.APP_NAME }}"
          echo "The app version is ${{ env.APP_VERSION }}"
        shell: bash

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'

      - name: Install dependencies
        run: flutter pub get

      - name: Build for Windows
        run: |
          flutter config --enable-macos-desktop
          flutter config --enable-windows-desktop
          flutter build windows

      - name: Build for macOS
        run: |
          flutter config --enable-macos-desktop
          flutter build macos

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'v1.0.0'
          release_name: 'Flutter PC Release'
          body: 'Automated release of Flutter PC build'

      - name: Upload Windows build to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          asset_name: windows-build.zip
          asset_path: build/windows/Release/${{ env.APP_NAME }}.exe
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_content_type: application/octet-stream

      - name: Upload macOS build to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          asset_name: macos-build.zip
          asset_path: build/macos/Release/${{ env.APP_NAME }}.app
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_content_type: application/x-apple-diskimage
