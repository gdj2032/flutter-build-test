name: Flutter PC Build and Release

on:
  push:
    branches:
      - 'release/0.0.1'
      - /^release\/.*$/

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    outputs:
      app_name: ${{ steps.get_app_info.outputs.app_name || steps.get_app_info_win.outputs.app_name }}
      app_version: ${{ steps.get_app_info.outputs.app_version || steps.get_app_info_win.outputs.app_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 获取应用信息
      - name: Get app version and name
        id: get_app_info
        if: matrix.os != 'windows-latest'
        run: |
          APP_VERSION=$(grep -E '^version:' pubspec.yaml | awk '{print $2}' | tr -d "'")
          APP_NAME=$(grep -E '^name:' pubspec.yaml | awk '{print $2}')
          echo "::set-output name=app_version::$APP_VERSION"
          echo "::set-output name=app_name::$APP_NAME"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Get app version and name (Windows)
        if: matrix.os == 'windows-latest'
        id: get_app_info_win
        run: |
          $APP_VERSION = (Get-Content -Path pubspec.yaml | Select-String -Pattern 'version:' | ForEach-Object { $_.Line.Split(':')[1].Trim() })
          $APP_NAME = (Get-Content -Path pubspec.yaml | Select-String -Pattern 'name:' | ForEach-Object { $_.Line.Split(':')[1].Trim() })
          echo "::set-output name=app_version::$APP_VERSION"
          echo "::set-output name=app_name::$APP_NAME"
          echo "APP_VERSION=$APP_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "APP_NAME=$APP_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Print APP_NAME and APP_VERSION
        run: |
          echo "The app name is ${{ env.APP_NAME }}"
          echo "The app version is ${{ env.APP_VERSION }}"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'

      - name: Setup Flutter environment
        run: flutter pub get

      # macOS 构建
      - name: Build macOS app
        if: matrix.os == 'macos-latest'
        run: |
          flutter build macos --release
          mkdir -p release

      - name: Install create-dmg
        if: matrix.os == 'macos-latest'
        run: brew install create-dmg

      - name: Create DMG for macOS
        if: matrix.os == 'macos-latest'
        run: |
          create-dmg \
            --volname "${{ env.APP_NAME }} ${{ env.APP_VERSION }} Installer" \
            --background "assets/images/install_background.png" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon "${{ env.APP_NAME }}.app" 200 190 \
            --app-drop-link 400 185 \
            "release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg" \
            "build/macos/Build/Products/Release/${{ env.APP_NAME }}.app"

      # Windows 构建
      - name: Build Windows app
        if: matrix.os == 'windows-latest'
        run: |
          flutter build windows --release
          mkdir -p release
          cp "build/windows/x64/runner/Release/${{ env.APP_NAME }}.exe" "release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.exe"

      # 上传构建产物
      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifact
          path: ./release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifact
          path: ./release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 下载构建产物
      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-artifact
          path: ./release

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-artifact
          path: ./release

      # 创建 release
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN2 }}
          VERSION: ${{ needs.build.outputs.app_version }}
        with:
          tag: v${{ needs.build.outputs.app_version }}
          name: Release ${{ needs.build.outputs.app_name }} ${{ needs.build.outputs.app_version }}
          body: 'Release of Flutter PC build'
          artifacts: 'release/*'
          draft: false
          prerelease: false
          allowUpdates: true

      # 上传 release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN2 }}
          VERSION: ${{ needs.build.outputs.app_version }}
        with:
          files: |
            release/release-${{ needs.build.outputs.app_name }}-${{ needs.build.outputs.app_version }}.dmg
            release/release-${{ needs.build.outputs.app_name }}-${{ needs.build.outputs.app_version }}.exe

      - name: Merge to Main/Master
        if: startsWith(github.ref, 'refs/tags/release/')
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: ${{ github.ref }}
          commit: ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
          name: Release ${{ github.ref }}
          body: |
            New release for ${{ github.ref }}
