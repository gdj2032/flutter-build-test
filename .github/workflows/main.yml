name: Flutter PC Build and Release

on:
  push:
    branches:
      - 'release/**'

env:
  WIN_CERTIFICATE_PWD: ${{ secrets.WIN_CERTIFICATE_PWD }}
  WIN_CERTIFICATE: ${{ secrets.WIN_CERTIFICATE }}
  MAC_CERTIFICATE_PWD: ${{ secrets.MAC_CERTIFICATE_PWD }}
  MAC_CERTIFICATE: ${{ secrets.MAC_CERTIFICATE }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    outputs:
      app_name: ${{ steps.get_app_info.outputs.app_name || steps.get_app_info_win.outputs.app_name }}
      app_version: ${{ steps.get_app_info.outputs.app_version || steps.get_app_info_win.outputs.app_version }}

    steps:
      - name: Verify Secrets
        run: |
          echo "Checking required environment variables..."
          if [ -z "${{ env.WIN_CERTIFICATE_PWD }}" ]; then
            echo "Error: WIN_CERTIFICATE_PWD is not set"
            exit 1
          fi
          if [ -z "${{ env.WIN_CERTIFICATE }}" ]; then
            echo "Error: WIN_CERTIFICATE is not set"
            exit 1
          fi
          if [ -z "${{ env.MAC_CERTIFICATE_PWD }}" ]; then
            echo "Error: MAC_CERTIFICATE_PWD is not set"
            exit 1
          fi
          if [ -z "${{ env.MAC_CERTIFICATE }}" ]; then
            echo "Error: MAC_CERTIFICATE is not set"
            exit 1
          fi
          echo "All required environment variables are set"

      - name: Checkout code
        uses: actions/checkout@v2
      # 获取应用信息
      - name: Get app version and name
        id: get_app_info
        if: matrix.os != 'windows-latest'
        run: |
          APP_VERSION=$(grep -E '^version:' pubspec.yaml | awk '{print $2}' | tr -d "'")
          APP_NAME=$(grep -E '^name:' pubspec.yaml | awk '{print $2}')
          echo "::set-output name=app_version::$APP_VERSION"
          echo "::set-output name=app_name::$APP_NAME"
          echo "app_version=$APP_VERSION" >> $GITHUB_ENV
          echo "app_name=$APP_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Get app version and name (Windows)
        if: matrix.os == 'windows-latest'
        id: get_app_info_win
        run: |
          $APP_VERSION = (Get-Content -Path pubspec.yaml | Where-Object { $_ -match '^version:' }).Split(':')[1].Trim()
          $APP_NAME = (Get-Content -Path pubspec.yaml | Where-Object { $_ -match '^name:' }).Split(':')[1].Trim()
          echo "::set-output name=app_version::$APP_VERSION"
          echo "::set-output name=app_name::$APP_NAME"
          echo "app_version=$APP_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "app_name=$APP_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Print APP_NAME and APP_VERSION
        run: |
          echo "The app name is ${{ env.app_name }}"
          echo "The app version is ${{ env.app_version }}"

      - name: Set up Flutter
        id: flutter-env
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'

      - name: Setup Flutter environment
        run: flutter pub get

      # macOS 构建
      - name: Build macOS app
        if: matrix.os == 'macos-latest'
        run: |
          # 解码 base64 证书
          echo "$MAC_CERTIFICATE" | base64 --decode > flutter_build_test.p12

          # 验证并修复证书格式
          if ! file flutter_build_test.p12 | grep -q "PKCS12"; then
            echo "Warning: Certificate format may be invalid, attempting to fix..."
            openssl pkcs12 -in flutter_build_test.p12 -out fixed_cert.p12 -nodes -passin pass:"$MAC_CERTIFICATE_PWD" -passout pass:"$MAC_CERTIFICATE_PWD"
            if [ $? -eq 0 ]; then
              mv fixed_cert.p12 flutter_build_test.p12
              echo "Certificate format fixed successfully"
            else
              echo "Error: Failed to fix certificate format"
              exit 1
            fi
          fi

          # 验证证书内容
          if ! openssl pkcs12 -in flutter_build_test.p12 -noout -passin pass:"$MAC_CERTIFICATE_PWD"; then
            echo "Error: Invalid certificate content or password"
            exit 1
          fi

          # 安装证书到钥匙串
          security create-keychain -p "$MAC_CERTIFICATE_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MAC_CERTIFICATE_PWD" build.keychain
          
          # 设置 keychain 超时
          security set-keychain-settings -lut 3600 build.keychain
          
          # 导入证书并设置访问控制
          security import flutter_build_test.p12 -k build.keychain -P "$MAC_CERTIFICATE_PWD" -T /usr/bin/codesign -T /usr/bin/productsign || {
            echo "Failed to import certificate"
            security delete-keychain build.keychain
            exit 1
          }
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MAC_CERTIFICATE_PWD" build.keychain
          
          # 验证证书安装
          security find-identity -v -p codesigning build.keychain
          
          # 调试 keychain 状态
          security list-keychains
          security show-keychain-info build.keychain

          # 获取证书指纹
          CERT_FINGERPRINT=$(security find-certificate -c "flutter_build_test" -p build.keychain | openssl x509 -noout -fingerprint -sha1 | sed 's/://g' | cut -d= -f2)

          # 构建应用并签名
          flutter build macos --release --dart-define=CODESIGN_IDENTITY="$CERT_FINGERPRINT"
          mkdir -p release

          # 手动签名应用
          codesign --deep --force --verify --verbose --sign "$CERT_FINGERPRINT" build/macos/Build/Products/Release/${{ env.app_name }}.app

          # 清理证书
          security delete-keychain build.keychain
          rm -f flutter_build_test.*

      - name: Install create-dmg
        if: matrix.os == 'macos-latest'
        run: brew install create-dmg

      - name: Create DMG for macOS
        if: matrix.os == 'macos-latest'
        run: |
          create-dmg \
            --volname "${{ env.app_name }} ${{ env.app_version }} Installer" \
            --background "assets/images/install_background.png" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon "${{ env.app_name }}.app" 200 190 \
            --app-drop-link 400 185 \
            "release/release-${{ env.app_name }}-${{ env.app_version }}.dmg" \
            "build/macos/Build/Products/Release/${{ env.app_name }}.app"

      # Windows 构建
      - name: Create MSIX package
        if: matrix.os == 'windows-latest'
        run: |
          # 解码 base64 证书
          echo "$WIN_CERTIFICATE" | base64 --decode > flutter_build_test.pfx

          # 检查并安装 .pfx 证书到受信任的根和发布者存储区
          $certPath = "flutter_build_test.pfx"
          if (-Not (Test-Path $certPath)) {
              Write-Error "Certificate file not found: $certPath"
              exit 1
          }
          $certPassword = ConvertTo-SecureString -String "$env:WIN_CERTIFICATE_PWD" -AsPlainText -Force
          Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\LocalMachine\Root -Password $certPassword
          Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\LocalMachine\TrustedPublisher -Password $certPassword

          # 创建 MSIX 包并指定证书
          echo n | dart run msix:create --certificate-path flutter_build_test.pfx --certificate-password "$env:WIN_CERTIFICATE_PWD"

          $sourceFile = "build\windows\x64\runner\Release\${{ env.app_name }}.msix"
          $newFile = "release\release-${{ env.app_name }}-${{ env.app_version }}.msix"

          # 确保 release 目录存在
          New-Item -ItemType Directory -Path "release" -Force | Out-Null

          # 拷贝文件
          Copy-Item -Path $sourceFile -Destination $newFile -Force
          Write-Output "Copied MSIX package from $sourceFile to $newFile"

      # 上传构建产物
      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifact
          path: ./release/release-${{ env.app_name }}-${{ env.app_version }}.dmg

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifact
          path: ./release/release-${{ env.app_name }}-${{ env.app_version }}.msix

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 下载构建产物
      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-artifact
          path: ./release

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-artifact
          path: ./release

      # 上传 release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          VERSION: ${{ needs.build.outputs.app_version }}
        with:
          tag_name: "v${{ needs.build.outputs.app_version }}"
          name: Release ${{ needs.build.outputs.app_name }} ${{ needs.build.outputs.app_version }}
          body: 'Flutter PC Build and Release'
          draft: false
          prerelease: false
          files: |
            release/release-${{ needs.build.outputs.app_name }}-${{ needs.build.outputs.app_version }}.dmg
            release/release-${{ needs.build.outputs.app_name }}-${{ needs.build.outputs.app_version }}.msix

  merge:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Merge to Main/Master
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          MAIN_BRANCH="main"
          CURRENT_BRANCH=$(echo $GITHUB_REF | cut -d'/' -f3)

          git fetch origin $MAIN_BRANCH
          git checkout $MAIN_BRANCH
          git pull origin $MAIN_BRANCH

          git merge --no-ff $CURRENT_BRANCH -m "Merge branch '$CURRENT_BRANCH' into $MAIN_BRANCH"
          git push origin $MAIN_BRANCH
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
