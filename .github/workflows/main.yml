name: Flutter PC Build and Release

on:
  push:
    branches:
      - 'release/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    outputs:
      APP_NAME: ${{ steps.get_app_info.outputs.APP_NAME || steps.get_app_info_win.outputs.APP_NAME }}
      APP_VERSION: ${{ steps.get_app_info.outputs.APP_VERSION || steps.get_app_info_win.outputs.APP_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 获取应用信息
      - name: Get app version and name
        id: get_app_info
        if: matrix.os != 'windows-latest'
        run: |
          APP_VERSION=$(grep -E '^version:' pubspec.yaml | awk '{print $2}' | tr -d "'")
          APP_NAME=$(grep -E '^name:' pubspec.yaml | awk '{print $2}')
          echo "::set-output name=APP_VERSION::$APP_VERSION"
          echo "::set-output name=APP_NAME::$APP_NAME"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Get app version and name (Windows)
        if: matrix.os == 'windows-latest'
        id: get_app_info_win
        run: |
          $APP_VERSION = (Get-Content -Path pubspec.yaml | Where-Object { $_ -match '^version:' }).Split(':')[1].Trim()
          $APP_NAME = (Get-Content -Path pubspec.yaml | Where-Object { $_ -match '^name:' }).Split(':')[1].Trim()
          echo "::set-output name=APP_VERSION::$APP_VERSION"
          echo "::set-output name=APP_NAME::$APP_NAME"
          echo "APP_VERSION=$APP_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "APP_NAME=$APP_NAME" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Print APP_NAME and APP_VERSION
        run: |
          echo "The app name is ${{ env.APP_NAME }}"
          echo "The app version is ${{ env.APP_VERSION }}"

      - name: Set up Flutter
        id: flutter-env
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'

      - name: Setup Flutter environment
        run: flutter pub get

      # macOS 构建
      - name: Build macOS app
        if: matrix.os == 'macos-latest'
        run: |
          # 构建应用并签名
          flutter build macos --release
          mkdir -p release

      - name: Install create-dmg
        if: matrix.os == 'macos-latest'
        run: brew install create-dmg

      - name: Create DMG for macOS
        if: matrix.os == 'macos-latest'
        run: |
          create-dmg \
            --volname "${{ env.APP_NAME }} ${{ env.APP_VERSION }} Installer" \
            --background "assets/images/install_background.png" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon "${{ env.APP_NAME }}.app" 200 190 \
            --app-drop-link 400 185 \
            "release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg" \
            "build/macos/Build/Products/Release/${{ env.APP_NAME }}.app"

      # Windows 构建
      - name: Create MSIX package
        if: matrix.os == 'windows-latest'
        run: |
          # 创建msix
          echo y | dart run msix:create

          $sourceFile = "build\windows\x64\runner\Release\${{ env.APP_NAME }}.msix"
          $newFile = "release\release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.msix"

          # 确保 release 目录存在
          New-Item -ItemType Directory -Path "release" -Force | Out-Null

          # 拷贝文件
          Copy-Item -Path $sourceFile -Destination $newFile -Force
          Write-Output "Copied MSIX package from $sourceFile to $newFile"

      # 上传构建产物
      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifact
          path: ./release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifact
          path: ./release/release-${{ env.APP_NAME }}-${{ env.APP_VERSION }}.msix

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 下载构建产物
      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-artifact
          path: ./release

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-artifact
          path: ./release

      # 上传 release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          VERSION: ${{ needs.build.outputs.APP_VERSION }}
        with:
          tag_name: "v${{ needs.build.outputs.APP_VERSION }}"
          name: Release ${{ needs.build.outputs.APP_NAME }} ${{ needs.build.outputs.APP_VERSION }}
          body: 'Flutter PC Build and Release'
          draft: false
          prerelease: false
          files: |
            release/release-${{ needs.build.outputs.APP_NAME }}-${{ needs.build.outputs.APP_VERSION }}.dmg
            release/release-${{ needs.build.outputs.APP_NAME }}-${{ needs.build.outputs.APP_VERSION }}.msix

  merge:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Merge to Main/Master
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          MAIN_BRANCH="main"
          CURRENT_BRANCH=$(echo $GITHUB_REF | cut -d'/' -f3)

          git fetch origin $MAIN_BRANCH
          git checkout $MAIN_BRANCH
          git pull origin $MAIN_BRANCH

          git merge --no-ff $CURRENT_BRANCH -m "Merge branch '$CURRENT_BRANCH' into $MAIN_BRANCH"
          git push origin $MAIN_BRANCH
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
